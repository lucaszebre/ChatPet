// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
  engineType = "library"
}

datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}


enum role {
  USER
  MODEL
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  chats Chat[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}



model Chat {
  id String @id 
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  histories    Message[]
  createdAt DateTime 
  updateAt DateTime  @default(now()) 
  name String @default("")
  systemPrompt String 
  @@map("chat")
}




model Message{
  id String @id  @default(uuid())
  content String 
  role  role
  chatId String
  createdAt DateTime @default(now())
  chat Chat @relation(fields: [chatId] ,references: [id] ,onDelete: Cascade)
  image Image?

  @@map("message")
}



model Image{
  id String @id  @default(uuid())
  url String 
  key String?
  name String
  mimeType String
  sizeBytes String
  expirationTime String
  displayName String
  fileUri String
  messageId String @unique
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("image")
}



